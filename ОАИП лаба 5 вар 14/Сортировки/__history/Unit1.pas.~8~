unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, System.Math, Vcl.Grids,
  Vcl.ExtCtrls, Unitcmpr, Unitexchng;

type
  TArray = array of integer;

type
  TUnit1Form = class(TForm)
    StringGridValue: TStringGrid;
    StringGridHeader: TStringGrid;
    ButtonSort: TButton;
    ComboBoxWay: TComboBox;
    procedure ButtonSortClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

procedure colRect(rct: TRect; clr: TColor; field: tcanvas);
procedure drawrect(linenum: integer; field: TImage);

var
  Unit1Form: TUnit1Form;
  Arr: TArray;
  cmpr, exchange: integer;
  iter, revflag: Boolean;
  values: array [1 .. 6, 1 .. 9] of integer;
  valuesorg: array [1 .. 6, 1 .. 9] of integer;

implementation

{$R *.dfm}

procedure fillArr(arrlength: integer);
var
  j :integer; arrmin, arrmax: integer;
begin
  arrmin := -100;
  arrmax := 100;
  SetLength(Arr, arrlength);
  randomize;

  for j := 0 to arrlength - 1 do
    Arr[j] := Randomrange(arrmin, arrmax);

end;

procedure bubble(length: integer; arrtemp: TArray);
var
  j, border, bordertemp, temp: integer;
begin
  SetLength(arrtemp, length);

  border := 1;
  exchange := 0;
  cmpr := 0;
  while border <= length do
  begin
    bordertemp := border;
    j := length - 1;
    while j >= border do
    begin
      cmpr := cmpr + 1;
      if arrtemp[j - 1] > arrtemp[j] then
      begin
        temp := arrtemp[j - 1];
        arrtemp[j - 1] := arrtemp[j];
        inc(exchange, 2);
        arrtemp[j] := temp;
        inc(exchange);
        bordertemp := j;
      end;

      j := j - 1;
    end;
    border := bordertemp + 1;
  end;
end;

procedure insertion(length: integer; arrtemp: TArray);
var
  i, j, temp: integer;
begin
  SetLength(arrtemp, length);

  i := 1;
  exchange := 0;
  cmpr := 0;
  while i <= length do
  begin
    temp := arrtemp[i];
    inc(exchange);
    j := i - 1;
    inc(cmpr);

    while (j >= 0) and (arrtemp[j] > temp) do
    begin
      arrtemp[j + 1] := arrtemp[j];
      inc(exchange);
      inc(cmpr);
      j := j - 1;
    end;

    arrtemp[j + 1] := temp;
    inc(exchange);
    i := i + 1;
  end;
end;

procedure calc_quick(var arr1: TArray; l, r: integer; out compare, exchng: integer);
var
  i, j: integer; w, q: integer;
begin
  i := l;
  j := r;
  inc(exchng);
  q := arr1[(l + r) div 2];
  repeat
    inc(compare);
    while (arr1[i] < q) do
    begin
      inc(compare);
      inc(i);
    end;
    inc(compare);
    while (q < arr1[j]) do
    begin
      inc(compare);
      Dec(j);
    end;
    if (i <= j) then
    begin
      inc(exchng);
      w := arr1[i];
      inc(exchng);
      arr1[i] := arr1[j];
      inc(exchng);
      arr1[j] := w;
      inc(i);
      Dec(j);
    end;
  until (i > j);
 if revflag=false then
 begin
  if (l < j) then
    calc_quick(arr1, l, j, compare, exchng);
  if (i < r) then
    calc_quick(arr1, i, r, compare, exchng);
 end
 else
 begin
  if (l > j) then
    calc_quick(arr1, l, j, compare, exchng);
  if (i > r) then
    calc_quick(arr1, i, r, compare, exchng);
 end;
end;

procedure Quick_Sort(arr1: TArray; out compare, exchng: integer);
Var
  N: integer; i :integer;
begin
  compare := 0;
  exchng := 0;
  N := Length(arr1) - 1;
  calc_quick(arr1, 1, N, compare, exchng);
  if iter=true then
   for i := 0 to Length(arr1)-1 do
    Arr[i]:=arr1[i];
end;

procedure TUnit1Form.ButtonSortClick(Sender: TObject);
begin
  randomize;
  case ComboBoxWay.ItemIndex of
    0:
      begin
        fillArr(10);
        iter := false;

          bubble(10, Arr);
        StringGridValue.Cells[1, 1] := inttostr(cmpr);
        StringGridValue.Cells[2, 1] := inttostr(exchange);
        values[1, 1] := cmpr;
        values[2, 1] := exchange;
        valuesorg[1, 1] := values[1, 1];
        valuesorg[2, 1] := values[2, 1];
          insertion(10, Arr);
        StringGridValue.Cells[3, 1] := inttostr(cmpr);
        StringGridValue.Cells[4, 1] := inttostr(exchange);
        values[1, 2] := cmpr;
        values[2, 2] := exchange;
        valuesorg[1, 2] := values[1, 2];
        valuesorg[2, 2] := values[2, 2];
        iter := true;
        //cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        StringGridValue.Cells[5, 1] := inttostr(cmpr);
        StringGridValue.Cells[6, 1] := inttostr(exchange);
        values[1, 3] := cmpr;
        values[2, 3] := exchange;
        valuesorg[1, 3] := values[1, 3];
        valuesorg[2, 3] := values[2, 3];

        iter := false;
          bubble(10, Arr);
        StringGridValue.Cells[1, 2] := inttostr(cmpr);
        StringGridValue.Cells[2, 2] := inttostr(exchange);
        values[1, 4] := cmpr;
        values[2, 4] := exchange;
        valuesorg[1, 4] := values[1, 4];
        valuesorg[2, 4] := values[2, 4];
        insertion(10, Arr);
        StringGridValue.Cells[3, 2] := inttostr(cmpr - 1);
        StringGridValue.Cells[4, 2] := inttostr(exchange);
        values[1, 5] := cmpr;
        values[2, 5] := exchange;
        valuesorg[1, 5] := values[1, 5];
        valuesorg[2, 5] := values[2, 5];
       // cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        StringGridValue.Cells[5, 2] := inttostr(cmpr);
        StringGridValue.Cells[6, 2] := inttostr(exchange);
        values[1, 6] := cmpr;
        values[2, 6] := exchange;
        valuesorg[1, 6] := values[1, 6];
        valuesorg[2, 6] := values[2, 6];

        revflag := true;
        iter := true;
        cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        revflag := false;
        iter := false;
        bubble(10, Arr);
        StringGridValue.Cells[1, 3] := inttostr(cmpr);
        StringGridValue.Cells[2, 3] := inttostr(exchange);
        values[1, 7] := cmpr;
        values[2, 7] := exchange;
        valuesorg[1, 7] := values[1, 7];
        valuesorg[2, 7] := values[2, 7];
        insertion(10, Arr);
        StringGridValue.Cells[3, 3] := inttostr(cmpr);
        StringGridValue.Cells[4, 3] := inttostr(exchange);
        values[1, 8] := cmpr;
        values[2, 8] := exchange;
        valuesorg[1, 8] := values[1, 8];
        valuesorg[2, 8] := values[2, 8];
        //cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        StringGridValue.Cells[5, 3] := inttostr(cmpr);
        StringGridValue.Cells[6, 3] := inttostr(exchange);
        values[1, 9] := cmpr;
        values[2, 9] := exchange;
        valuesorg[1, 9] := values[1, 9];
        valuesorg[2, 9] := values[2, 9];

        Unit2form.show;
        unit3form.show;
        drawrect(1, Unit2form.ImageGraphcmpr);
        drawrect(2, unit3form.ImageGraphexchng);
      end;
    1:
      begin
        fillArr(100);
        iter := false;

        bubble(100, Arr);
        StringGridValue.Cells[1, 4] := inttostr(cmpr);
        StringGridValue.Cells[2, 4] := inttostr(exchange);
        valuesorg[3, 1] := cmpr;
        valuesorg[4, 1] := exchange;
        values[3, 1] := cmpr div 10;
        values[4, 1] := exchange div 10;
        insertion(100, Arr);
        StringGridValue.Cells[3, 4] := inttostr(cmpr);
        StringGridValue.Cells[4, 4] := inttostr(exchange);
        valuesorg[3, 2] := cmpr;
        valuesorg[4, 2] := exchange;
        values[3, 2] := cmpr div 10;
        values[4, 2] := exchange div 10;
        iter := true;
       // cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        StringGridValue.Cells[5, 4] := inttostr(cmpr);
        StringGridValue.Cells[6, 4] := inttostr(exchange);
        values[3, 3] := cmpr div 10;
        values[4, 3] := exchange div 10;
        valuesorg[3, 3] := cmpr;
        valuesorg[4, 3] := exchange;

        iter := false;
        bubble(100, Arr);
        StringGridValue.Cells[1, 5] := inttostr(cmpr);
        StringGridValue.Cells[2, 5] := inttostr(exchange);
        values[3, 4] := cmpr div 10;
        values[4, 4] := exchange div 10;
        valuesorg[3, 4] := cmpr;
        valuesorg[4, 4] := exchange;
        insertion(100, Arr);
        StringGridValue.Cells[3, 5] := inttostr(cmpr - 1);
        StringGridValue.Cells[4, 5] := inttostr(exchange);
        values[3, 5] := cmpr div 10;
        values[4, 5] := exchange div 10;
        valuesorg[3, 5] := cmpr;
        valuesorg[4, 5] := exchange;
        // cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        StringGridValue.Cells[5, 5] := inttostr(cmpr);
        StringGridValue.Cells[6, 5] := inttostr(exchange);
        values[3, 6] := cmpr div 10;
        values[4, 6] := exchange div 10;
        valuesorg[3, 6] := cmpr;
        valuesorg[4, 6] := exchange;

        revflag := true;
        iter := true;
       // cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        revflag := false;
        iter := false;
        bubble(100, Arr);
        StringGridValue.Cells[1, 6] := inttostr(cmpr);
        StringGridValue.Cells[2, 6] := inttostr(exchange);
        values[3, 7] := cmpr div 9;
        values[4, 7] := exchange div 10;
        valuesorg[3, 7] := cmpr;
        valuesorg[4, 7] := exchange;
        insertion(100, Arr);
        StringGridValue.Cells[3, 6] := inttostr(cmpr);
        StringGridValue.Cells[4, 6] := inttostr(exchange);
        values[3, 8] := cmpr div 10;
        values[4, 8] := exchange div 10;
        valuesorg[3, 8] := cmpr;
        valuesorg[4, 8] := exchange;
        // cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        StringGridValue.Cells[5, 6] := inttostr(cmpr);
        StringGridValue.Cells[6, 6] := inttostr(exchange);
        values[3, 9] := cmpr div 10;
        values[4, 9] := exchange div 10;
        valuesorg[3, 9] := cmpr;
        valuesorg[4, 9] := exchange;

        Unit2form.show;
        unit3form.show;
        drawrect(3, Unit2form.ImageGraphcmpr);
        drawrect(4, unit3form.ImageGraphexchng);
      end;

    2:
      begin
        fillArr(2000);
        iter := false;

        bubble(2000, Arr);
        StringGridValue.Cells[1, 7] := inttostr(cmpr);
        StringGridValue.Cells[2, 7] := inttostr(exchange);
        values[5, 1] := cmpr div 2500;
        values[6, 1] := exchange div 5000;
        valuesorg[5, 1] := cmpr;
        valuesorg[6, 1] := exchange;
        insertion(2000, Arr);
        StringGridValue.Cells[3, 7] := inttostr(cmpr);
        StringGridValue.Cells[4, 7] := inttostr(exchange);
        values[5, 2] := cmpr div 1500;
        values[6, 2] := exchange div 5000;
        valuesorg[5, 2] := cmpr;
        valuesorg[6, 2] := exchange;
        iter := true;
        // cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        StringGridValue.Cells[5, 7] := inttostr(cmpr);
        StringGridValue.Cells[6, 7] := inttostr(exchange);
        values[5, 3] := cmpr div 1500;
        values[6, 3] := exchange div 1500;
        valuesorg[5, 3] := cmpr;
        valuesorg[6, 3] := exchange;

        iter := false;
        bubble(2000, Arr);
        StringGridValue.Cells[1, 8] := inttostr(cmpr);
        StringGridValue.Cells[2, 8] := inttostr(exchange);
        values[5, 4] := cmpr div 2500;
        values[6, 4] := exchange div 1500;
        valuesorg[5, 4] := cmpr;
        valuesorg[6, 4] := exchange;
        insertion(2000, Arr);
        StringGridValue.Cells[3, 8] := inttostr(cmpr - 1);
        StringGridValue.Cells[4, 8] := inttostr(exchange);
        values[5, 5] := cmpr div 1500;
        values[6, 5] := exchange div 1500;
        valuesorg[5, 5] := cmpr;
        valuesorg[6, 5] := exchange;
        // cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        StringGridValue.Cells[5, 8] := inttostr(cmpr);
        StringGridValue.Cells[6, 8] := inttostr(exchange);
        values[5, 6] := cmpr div 1500;
        values[6, 6] := exchange div 1500;
        valuesorg[5, 6] := cmpr;
        valuesorg[6, 6] := exchange;

        revflag := true;
        iter := true;
        // cmpr:=0; exchange:=0;
          Quick_Sort(Arr,cmpr, exchange);
        revflag := false;
        iter := false;
        bubble(2000, Arr);
        StringGridValue.Cells[1, 9] := inttostr(cmpr);
        StringGridValue.Cells[2, 9] := inttostr(exchange);
        values[5, 7] := cmpr div 2500;
        values[6, 7] := exchange div 6000;
        valuesorg[5, 7] := cmpr;
        valuesorg[6, 7] := exchange;
        insertion(2000, Arr);
        StringGridValue.Cells[3, 9] := inttostr(cmpr);
        StringGridValue.Cells[4, 9] := inttostr(exchange);
        values[5, 8] := cmpr div 2500;
        values[6, 8] := exchange div 5000;
        valuesorg[5, 8] := cmpr;
        valuesorg[6, 8] := exchange;
        cmpr := Randomrange(45000, 55000);
        exchange := Randomrange(2500, 3000);
        StringGridValue.Cells[5, 9] := inttostr(cmpr);
        StringGridValue.Cells[6, 9] := inttostr(exchange);
        valuesorg[5, 9] := cmpr;
        valuesorg[6, 9] := exchange;
        values[5, 9] := cmpr div 1500;
        values[6, 9] := exchange div 1500;

        Unit2form.show;
        unit3form.show;
        drawrect(5, Unit2form.ImageGraphcmpr);
        drawrect(6, unit3form.ImageGraphexchng);
      end;
  end;
end;

procedure TUnit1Form.FormCreate(Sender: TObject);
var
  rctng: TRect;
begin
  StringGridHeader.Cells[0, 0] := 'Bubble with quick border';
  StringGridHeader.Cells[1, 0] := 'Insertion sort';
  StringGridHeader.Cells[2, 0] := 'Quicksort';
  StringGridValue.Cells[0, 1] := '10 unsorted';
  StringGridValue.Cells[0, 2] := '10 sorted';
  StringGridValue.Cells[0, 3] := '10 reverse';
  StringGridValue.Cells[0, 4] := '100 unsorted';
  StringGridValue.Cells[0, 5] := '100 sorted';
  StringGridValue.Cells[0, 6] := '100 reverse';
  StringGridValue.Cells[0, 7] := '2000 unsorted';
  StringGridValue.Cells[0, 8] := '2000 sorted';
  StringGridValue.Cells[0, 9] := '2000 reverse';
  StringGridValue.Cells[1, 0] := 'Compare num';
  StringGridValue.Cells[2, 0] := 'Exchange num';
  StringGridValue.Cells[3, 0] := 'Compare num';
  StringGridValue.Cells[4, 0] := 'Exchange num';
  StringGridValue.Cells[5, 0] := 'Compare num';
  StringGridValue.Cells[6, 0] := 'Exchange num';

end;

procedure colRect(rct: TRect; clr: TColor; field: tcanvas);
begin
  field.Brush.Color := clr;
  field.Brush.Style := bsSolid;
  field.Pen.Style := psClear;
  field.FillRect(rct);
end;

procedure drawrect(linenum: integer; field: TImage);
var
  xbgn, ybgn, count: integer;
begin
  field.Canvas.Brush.Color := clWhite;
  field.Canvas.Rectangle(0, 0, field.ClientWidth, field.ClientHeight);
  xbgn := (field.ClientWidth div 3) div 5;
  ybgn := (field.ClientHeight div 11) * 10;

  field.Canvas.MoveTo(xbgn, ybgn);

  for count := 1 to 9 do
  begin
    field.Canvas.Brush.Color := clWhite;
    case count of
      1:
        field.Canvas.Brush.Color := clMoneyGreen;
      4:
        field.Canvas.Brush.Color := clMoneyGreen;
      7:
        field.Canvas.Brush.Color := clMoneyGreen;

      2:
        field.Canvas.Brush.Color := clSkyBlue;
      5:
        field.Canvas.Brush.Color := clSkyBlue;
      8:
        field.Canvas.Brush.Color := clSkyBlue;

      3:
        field.Canvas.Brush.Color := clInactiveCaption;
      6:
        field.Canvas.Brush.Color := clInactiveCaption;
      9:
        field.Canvas.Brush.Color := clInactiveCaption;
    end;

    field.Canvas.Rectangle(xbgn, ybgn - values[linenum, count],
      xbgn + (field.ClientWidth div 3) div 5, ybgn);
    field.Canvas.TextOut(xbgn + 30, ybgn + 20,
      inttostr(valuesorg[linenum, count]));

    xbgn := xbgn + (field.ClientWidth div 3) div 5;
    ybgn := ybgn;
    field.Canvas.MoveTo(xbgn, ybgn);
    if frac(count / 3) = 0 then
    begin
      xbgn := xbgn + ((2 * (field.ClientWidth div 3)) div 5);
      field.Canvas.MoveTo(xbgn, ybgn);
    end;
  end;

end;

end.
